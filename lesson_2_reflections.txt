What happens when you initialize a repository? Why do you need to do it?
It sets the folder you initialize up as a git repository and allows you to start tracking history and changes.  It must be done in order to use git on that folder

How is the staging area different from the working directory and repository? What value do you think it offers?
It acts as a bridge/buffer between the working directory and repository and allows you to group commits/files

How can you use the staging area to make sure you have one commit per logical change?
You can make a change and then add the modified file to the staging area.  Run git diff to make sure there's no differences between your working directory and staging area.  If so, only the change you specified to add is in the staging area.  That can be committed as your one logical change


What are some situations when branches would be helpful in keeping your history organized?  How would branches help?
They are helpful for experimental development and creating different versions of your code (e.g. easy, medium, hard, etc)

How do the diagrams help you visualize the branch structure?
Diagrams help track which commits are included or excluded in each branch and also help keep track of commits that are not stored within a branch and will be lost if the commit id is unknown

What is the result of merging two branches together?  Why do we represent it in the diagram the way we do?
It takes all the new lines of code and adds them to one file and uses logical reasoning to include or exclude all other lines of code.  We represent it as the combination of two branches b/c the new branch will include both sets of commits

What are the pros and cons of Git's automatic merging vs. always doing merges manually?
Pros are it can be faster and easier
Cons are it can lead to confusing conflict resolution
